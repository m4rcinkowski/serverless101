service: serverless101

app: serverless101-app
org: tomaszmarcinkowski

frameworkVersion: '2'

# @todo lambda 2 - idempotent? at first, check if the data needs a refreshment?
# @todo lambda 2 - supports multiple events in a batch
# @todo separate branch with a cleaner and testable version of the code

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    AWS_ACCOUNT_ID: !Ref "AWS::AccountId"
    COMPANIES_TABLE: ${self:service}-${self:provider.stage}-companiesFinanceInfo
    FETCH_QUEUE: ${self:service}-${self:provider.stage}-dataFetchQueue
    FETCH_QUEUE_URL: !Ref "DataFetchQueue"
    SOURCE_URI: https://dn7d67kfl4.execute-api.us-east-1.amazonaws.com/dev/slow-data-source/financial-risk/{id}
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:dynamodb:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':table/'
            - Ref: CompaniesTable
    - Effect: Allow
      Action:
        - sqs:GetQueueUrl
        - sqs:SendMessage
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:sqs:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - ${self:provider.environment.FETCH_QUEUE}

plugins:
  - serverless-plugin-typescript

functions:
  unreliableDataSource:
    handler: functions/dataSource.default
    events:
      - http:
          path: slow-data-source/financial-risk/{id}
          method: get
    timeout: 5
  httpCheckCompany:
    handler: functions/financialRisk.apiCheckCompany
    events:
      - http:
          path: financial-risk/{id}
          method: get
  asyncCompanyFetch:
    handler: functions/financialRisk.queueFetchCompany
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - DataFetchQueue
              - Arn

resources:
  Resources:
    CompaniesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.COMPANIES_TABLE}
        AttributeDefinitions:
          - AttributeName: companyId
            AttributeType: N
        KeySchema:
          - AttributeName: companyId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DataFetchQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.FETCH_QUEUE}
